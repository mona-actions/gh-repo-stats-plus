{"version":3,"file":"index.js","sources":["../src/version.ts","../src/utils.ts","../src/service.ts","../src/octokit.ts","../src/logger.ts","../src/auth.ts","../src/state.ts","../src/retry.ts","../src/main.ts","../src/commands/repo-stats-command.ts","../src/commands/missing-repos-command.ts","../src/index.ts"],"sourcesContent":["export default process.env.NPM_PACKAGE_VERSION ?? '0.0.1-development';\n","export function generateRepoStatsFileName(orgName: string): string {\n  const timestamp = new Date()\n    .toISOString()\n    .replace(/[-:T\\.Z]/g, '')\n    .slice(0, 12);\n  return `${orgName.toLowerCase()}-all_repos-${timestamp}_ts.csv`;\n}\n\n/**\n * Converts kilobytes to megabytes\n * @param kb Size in kilobytes, can be null or undefined\n * @returns Size in megabytes\n */\nexport function convertKbToMb(kb: number | null | undefined): number {\n  if (kb == null) {\n    return 0;\n  }\n  return kb / 1024;\n}\n\nexport function checkIfHasMigrationIssues({\n  repoSizeMb,\n  totalRecordCount,\n}: {\n  repoSizeMb: number;\n  totalRecordCount: number;\n}): boolean {\n  if (totalRecordCount >= 60000) {\n    return true;\n  }\n  if (repoSizeMb > 1500) {\n    return true;\n  }\n  return false;\n}\n\nexport function parseIntOption(value: string, defaultValue?: number): number {\n  const parsed = parseInt(value, 10);\n  if (isNaN(parsed)) {\n    if (defaultValue !== undefined) {\n      return defaultValue;\n    }\n    throw new Error(`Invalid number: ${value}`);\n  }\n  return parsed;\n}\n\nexport function parseFloatOption(value: string, defaultValue?: number): number {\n  const parsed = parseFloat(value);\n  if (isNaN(parsed)) {\n    if (defaultValue !== undefined) {\n      return defaultValue;\n    }\n    throw new Error(`Invalid number: ${value}`);\n  }\n  return parsed;\n}\n\nexport function formatElapsedTime(startTime: Date, endTime: Date): string {\n  const elapsed = endTime.getTime() - startTime.getTime();\n  const seconds = Math.floor(elapsed / 1000);\n  const minutes = Math.floor(seconds / 60);\n  const hours = Math.floor(minutes / 60);\n\n  return `${hours}h ${minutes % 60}m ${seconds % 60}s`;\n}\n","import { Octokit } from 'octokit';\nimport { components } from '@octokit/openapi-types';\nimport {\n  AuthResponse,\n  IssuesResponse,\n  IssueStats,\n  PullRequestNode,\n  RateLimitCheck,\n  RateLimitResponse,\n  RateLimitResult,\n  RepositoryStats,\n} from './types.js';\n\ntype Repository = components['schemas']['repository'];\n\nexport class OctokitClient {\n  private readonly octokit_headers = {\n    'X-GitHub-Api-Version': '2022-11-28',\n  };\n\n  constructor(private readonly octokit: Octokit) {}\n\n  async generateAppToken(): Promise<string> {\n    const appToken = (await this.octokit.auth({\n      type: 'installation',\n    })) as AuthResponse;\n    process.env.GH_TOKEN = appToken.token;\n    return appToken.token;\n  }\n\n  async *listReposForOrg(\n    org: string,\n    per_page: number,\n  ): AsyncGenerator<components['schemas']['repository'], void, unknown> {\n    const iterator = this.octokit.paginate.iterator(\n      this.octokit.rest.repos.listForOrg,\n      {\n        org,\n        type: 'all',\n        per_page: per_page,\n        page: 1,\n        headers: this.octokit_headers,\n      },\n    );\n\n    for await (const { data: repos } of iterator) {\n      for (const repo of repos) {\n        yield repo as Repository;\n      }\n    }\n  }\n\n  // all repos in an org\n  async *getOrgRepoStats(\n    org: string,\n    per_page: number,\n    cursor: string | null = null,\n  ): AsyncGenerator<RepositoryStats, void, unknown> {\n    const query = `\n      query orgRepoStats($login: String!, $pageSize: Int!, $cursor: String) {\n        organization(login: $login) {\n          repositories(first: $pageSize, after: $cursor, orderBy: {field: NAME, direction: ASC}) {\n            pageInfo {\n              endCursor\n              hasNextPage\n              startCursor\n            }\n            nodes {\n              branches: refs(refPrefix:\"refs/heads/\") {\n                totalCount\n              }\n              branchProtectionRules {\n                totalCount\n              }\n              commitComments {\n                totalCount\n              }\n              collaborators {\n                totalCount\n              }\n              createdAt\n              diskUsage\n              discussions {\n                totalCount\n              }\n              hasWikiEnabled\n              isFork\n              isArchived\n              issues(first: $pageSize) {\n                totalCount\n                pageInfo {\n                  endCursor\n                  hasNextPage\n                }\n                nodes {\n                  timeline {\n                    totalCount\n                  }\n                  comments {\n                    totalCount\n                  }\n                }\n              }\n              milestones {\n                totalCount\n              }\n              name\n              owner {\n                login\n              }\n              projectsV2 {\n                totalCount\n              }\n              pullRequests(first: $pageSize) {\n                totalCount\n                pageInfo {\n                  endCursor\n                  hasNextPage\n                }\n                nodes {\n                  comments {\n                    totalCount\n                  }\n                  commits {\n                    totalCount\n                  }\n                  number\n                  reviews(first: $pageSize) {\n                    totalCount\n                    pageInfo {\n                      endCursor\n                      hasNextPage\n                    }\n                    nodes {\n                      comments {\n                        totalCount\n                      }\n                    }\n                  }\n                  timeline {\n                    totalCount\n                  }\n                }\n              }\n              pushedAt\n              releases {\n                totalCount\n              }\n              tags: refs(refPrefix: \"refs/tags/\") {\n                totalCount\n              }\n              updatedAt\n              url\n            }\n          }\n        }\n      }`;\n\n    const iterator = this.octokit.graphql.paginate.iterator(query, {\n      login: org,\n      pageSize: per_page,\n      cursor,\n    });\n\n    for await (const response of iterator) {\n      const repos = response.organization.repositories.nodes;\n      const pageInfo = response.organization.repositories.pageInfo;\n\n      for (const repo of repos) {\n        yield { ...repo, pageInfo };\n      }\n    }\n  }\n\n  // individual repo stats\n  async getRepoStats(\n    owner: string,\n    repo: string,\n    per_page: number,\n  ): Promise<RepositoryStats> {\n    const query = `\n      query repoStats($owner: String!, $name: String!, $pageSize: Int!) {\n        repository(owner: $owner, name: $name) {\n          branches: refs(refPrefix:\"refs/heads/\") {\n            totalCount\n          }\n          branchProtectionRules {\n            totalCount\n          }\n          commitComments {\n            totalCount\n          }\n          collaborators {\n            totalCount\n          }\n          createdAt\n          diskUsage\n          discussions {\n            totalCount\n          }\n          hasWikiEnabled\n          isFork\n          isArchived\n          issues(first: $pageSize) {\n            totalCount\n            pageInfo {\n              endCursor\n              hasNextPage\n            }\n            nodes {\n              timeline {\n                totalCount\n              }\n              comments {\n                totalCount\n              }\n            }\n          }\n          milestones {\n            totalCount\n          }\n          name\n          owner {\n            login\n          }\n          projectsV2 {\n            totalCount\n          }\n          pullRequests(first: $pageSize) {\n            totalCount\n            pageInfo {\n              endCursor\n              hasNextPage\n            }\n            nodes {\n              comments {\n                totalCount\n              }\n              commits {\n                totalCount\n              }\n              number\n              reviews(first: $pageSize) {\n                totalCount\n                pageInfo {\n                  endCursor\n                  hasNextPage\n                }\n                nodes {\n                  comments {\n                    totalCount\n                  }\n                }\n              }\n              timeline {\n                totalCount\n              }\n            }\n          }\n          pushedAt\n          releases {\n            totalCount\n          }\n          tags: refs(refPrefix: \"refs/tags/\") {\n            totalCount\n          }\n          updatedAt\n          url\n        }\n      }`;\n\n    const response = await this.octokit.graphql<any>(query, {\n      owner,\n      name: repo,\n      pageSize: per_page,\n    });\n\n    // Create a pageInfo object to maintain consistency with getOrgRepoStats\n    const pageInfo = {\n      endCursor: null,\n      hasNextPage: false,\n      startCursor: null,\n    };\n\n    return { ...response.repository, pageInfo };\n  }\n\n  async *getRepoIssues(\n    owner: string,\n    repo: string,\n    per_page: number,\n    cursor: string | null = null,\n  ): AsyncGenerator<IssueStats, void, unknown> {\n    const query = `\n      query repoIssues($owner: String!, $repo: String!, $pageSize: Int!, $cursor: String) {\n        repository(owner: $owner, name: $repo) {\n          issues(first: $pageSize, after: $cursor) {\n            pageInfo {\n              endCursor\n              hasNextPage\n            }\n            nodes {\n              timeline {\n                totalCount\n              }\n              comments {\n                totalCount\n              }\n            }\n          }\n        }\n      }`;\n\n    const iterator = this.octokit.graphql.paginate.iterator<IssuesResponse>(\n      query,\n      {\n        owner,\n        repo,\n        pageSize: per_page,\n        cursor,\n      },\n    );\n\n    for await (const response of iterator) {\n      const issues = response.repository.issues.nodes;\n      for (const issue of issues) {\n        yield issue;\n      }\n    }\n  }\n\n  async *getRepoPullRequests(\n    owner: string,\n    repo: string,\n    per_page: number,\n    cursor: string | null = null,\n  ): AsyncGenerator<PullRequestNode, void, unknown> {\n    const query = `\n      query repoPullRequests($owner: String!, $repo: String!, $pageSize: Int!, $cursor: String) {\n        repository(owner: $owner, name: $repo) {\n          pullRequests(first: $pageSize, after: $cursor) {\n            pageInfo {\n              endCursor\n              hasNextPage\n            }\n            nodes {\n              number\n              timeline {\n                totalCount\n              }\n              comments {\n                totalCount\n              }\n              commits {\n                totalCount\n              }\n              reviews(first: $pageSize) {\n                totalCount\n                nodes {\n                  comments {\n                    totalCount\n                  }\n                }\n              }\n            }\n          }\n        }\n      }`;\n\n    const iterator = this.octokit.graphql.paginate.iterator(query, {\n      owner,\n      repo,\n      pageSize: per_page,\n      cursor,\n    });\n\n    for await (const response of iterator) {\n      const prs = response.repository.pullRequests.nodes;\n      for (const pr of prs) {\n        yield pr;\n      }\n    }\n  }\n\n  async checkRateLimits(\n    sleepSeconds = 60,\n    maxRetries = 5,\n  ): Promise<RateLimitResult> {\n    const result: RateLimitResult = {\n      apiRemainingRequest: 0,\n      apiRemainingMessage: '',\n      graphQLRemaining: 0,\n      graphQLMessage: '',\n      message: '',\n      messageType: 'info',\n    };\n\n    try {\n      let sleepCounter = 0;\n      const rateLimitCheck = await this.getRateLimitData();\n\n      if (!rateLimitCheck) {\n        throw new Error('Failed to get rate limit data');\n      }\n\n      result.graphQLRemaining = rateLimitCheck.graphQLRemaining;\n      result.apiRemainingRequest = rateLimitCheck.coreRemaining;\n\n      if (rateLimitCheck.message) {\n        result.apiRemainingMessage = rateLimitCheck.message;\n        result.graphQLMessage = rateLimitCheck.message;\n        result.message = rateLimitCheck.message;\n        return result;\n      }\n\n      if (rateLimitCheck.graphQLRemaining === 0) {\n        sleepCounter++;\n        const warningMessage = `We have run out of GraphQL calls and need to sleep! Sleeping for ${sleepSeconds} seconds before next check`;\n\n        if (sleepCounter > maxRetries) {\n          result.message = `Exceeded maximum retry attempts of ${maxRetries}`;\n          result.messageType = 'error';\n          return result;\n        }\n\n        result.message = warningMessage;\n        result.messageType = 'warning';\n        result.graphQLMessage = warningMessage;\n\n        await new Promise((resolve) =>\n          setTimeout(resolve, sleepSeconds * 1000),\n        );\n      } else {\n        const message = `Rate limits remaining: ${rateLimitCheck.graphQLRemaining.toLocaleString()} GraphQL points ${rateLimitCheck.coreRemaining.toLocaleString()} REST calls`;\n        result.message = message;\n        result.messageType = 'info';\n        result.graphQLMessage = message;\n      }\n    } catch (error) {\n      result.message =\n        error instanceof Error\n          ? error.message\n          : 'Failed to get valid response back from GitHub API!';\n      result.messageType = 'error';\n    }\n\n    return result;\n  }\n\n  private async getRateLimitData(): Promise<RateLimitCheck | null> {\n    const response = await this.octokit.request('GET /rate_limit');\n    const rateLimitData = response.data as RateLimitResponse;\n\n    if (rateLimitData.message === 'Rate limiting is not enabled.') {\n      return {\n        graphQLRemaining: 9999999999,\n        coreRemaining: 9999999999,\n        message: 'API rate limiting is not enabled.',\n      };\n    }\n\n    return {\n      graphQLRemaining: rateLimitData.resources?.graphql.remaining || 0,\n      coreRemaining: rateLimitData.resources?.core.remaining || 0,\n      message: '',\n    };\n  }\n}\n","import {\n  fetch as undiciFetch,\n  ProxyAgent,\n  RequestInfo as undiciRequestInfo,\n  RequestInit as undiciRequestInit,\n} from 'undici';\nimport { Octokit, RequestError } from 'octokit';\nimport { paginateGraphQL } from '@octokit/plugin-paginate-graphql';\nimport { throttling } from '@octokit/plugin-throttling';\nimport { Logger, LoggerFn } from './types.js';\nimport { AuthConfig } from './auth.js';\n\nconst OctokitWithPlugins = Octokit.plugin(paginateGraphQL).plugin(throttling);\n\ninterface OnRateLimitOptions {\n  method: string;\n  url: string;\n}\n\nexport const createOctokit = (\n  authConfig: AuthConfig,\n  baseUrl: string,\n  proxyUrl: string | undefined,\n  logger: Logger,\n  fetch?: any,\n): Octokit => {\n  const customFetch = (url: undiciRequestInfo, options: undiciRequestInit) => {\n    return undiciFetch(url, {\n      ...options,\n      dispatcher: proxyUrl ? new ProxyAgent(proxyUrl) : undefined,\n    });\n  };\n\n  const wrappedWarn: LoggerFn = (message: string, meta: unknown) => {\n    if (message.includes('https://gh.io/tag-protection-sunset')) return;\n    logger.warn(message, meta);\n  };\n\n  const octokit = new OctokitWithPlugins({\n    auth: authConfig.auth,\n    authStrategy: authConfig.authStrategy,\n    baseUrl,\n    request: {\n      fetch: fetch || customFetch,\n      log: { ...logger, warn: wrappedWarn },\n    },\n    retry: {\n      enabled: false,\n    },\n    throttle: {\n      onRateLimit: (retryAfter: any, options: any) => {\n        const { method, url } = options as OnRateLimitOptions;\n\n        logger.warn(\n          `Primary rate limit exceeded for request \\`${method} ${url}\\` - retrying after ${retryAfter} seconds`,\n        );\n\n        return true;\n      },\n      onSecondaryRateLimit: (retryAfter: any, options: any) => {\n        const { method, url } = options as OnRateLimitOptions;\n\n        logger.warn(\n          `Secondary rate limit exceeded for request \\`${method} ${url}\\` - retrying after ${retryAfter} seconds`,\n        );\n\n        return true;\n      },\n    },\n  });\n\n  octokit.hook.after('request', async (response: any, options: any) => {\n    logger.debug(`${options.method} ${options.url}: ${response.status}`);\n  });\n\n  octokit.hook.error('request', async (error: any, options: any) => {\n    if (error instanceof RequestError) {\n      logger.debug(\n        `${options.method} ${options.url}: ${error.status} - ${error.message}`,\n      );\n    } else {\n      logger.debug(\n        `${options.method} ${options.url}: ${error.name} - ${error.message}`,\n      );\n    }\n\n    throw error;\n  });\n\n  return octokit;\n};\n","import * as winston from 'winston';\nimport * as path from 'path';\nimport { mkdir } from 'fs/promises';\nimport { existsSync } from 'fs';\nconst { combine, timestamp, printf, colorize } = winston.format;\n\nimport { Logger, ProcessingSummary } from './types.js';\n\nconst format = printf(({ level, message, timestamp, owner, repo }): string => {\n  if (owner && repo) {\n    return `${timestamp} ${level} [${owner}/${repo}]: ${message}`;\n  } else {\n    return `${timestamp} ${level}: ${message}`;\n  }\n});\n\nconst generateLoggerOptions = async (\n  verbose: boolean,\n  logFileName?: string,\n): Promise<winston.LoggerOptions> => {\n  // Use absolute path for logs directory\n  const logsDir = path.resolve(process.cwd(), 'logs');\n\n  try {\n    // Create logs directory if it doesn't exist\n    if (!existsSync(logsDir)) {\n      await mkdir(logsDir, { recursive: true });\n    }\n\n    const defaultLogName = `repo-stats-${\n      new Date().toISOString().split('T')[0]\n    }.log`;\n\n    const logFile = path.resolve(logsDir, logFileName ?? defaultLogName);\n\n    console.debug(`Initializing logger with file: ${logFile}`); // Debug output\n\n    const commonFormat = combine(timestamp(), format);\n\n    return {\n      level: verbose ? 'debug' : 'info',\n      format: commonFormat,\n      transports: [\n        new winston.transports.Console({\n          format: combine(colorize(), commonFormat),\n        }),\n        new winston.transports.File({\n          filename: logFile,\n          format: commonFormat,\n          options: { flags: 'a' }, // Append mode\n        }),\n      ],\n      exitOnError: false,\n    };\n  } catch (error) {\n    console.error(`Failed to setup logger: ${error}`);\n    throw error;\n  }\n};\n\nexport const createLogger = async (\n  verbose: boolean,\n  logFileName?: string,\n): Promise<Logger> => {\n  const options = await generateLoggerOptions(verbose, logFileName);\n  const logger = winston.createLogger(options);\n\n  // Add error handler\n  logger.on('error', (error) => {\n    console.error('Logger error:', error);\n  });\n\n  return logger;\n};\n\nexport const logProcessingSummary = (\n  summary: ProcessingSummary,\n  logger: Logger,\n): void => {\n  logger.info('Processing Summary:');\n  logger.info(`✓ Initially processed: ${summary.initiallyProcessed} files`);\n  if (summary.totalRetried > 0) {\n    logger.info(`✓ Successfully retried: ${summary.totalRetried} files`);\n  }\n  logger.info(`✓ Total successfully processed: ${summary.totalSuccess} files`);\n  logger.info(\n    `✗ Failed to process: ${summary.totalFailures} files that were attempted to be retried`,\n  );\n  if (summary.remainingUnprocessed > 0) {\n    logger.warn(\n      `⚠ Unprocessed files remaining: ${summary.remainingUnprocessed}`,\n    );\n  }\n  logger.debug(`Total processing attempts: ${summary.totalAttempts}`);\n  logger.info('Completed repo-stats-queue processing');\n};\n\nexport const logBatchProcessing = {\n  starting: (fileCount: number, logger: Logger): void => {\n    logger.info(`Starting batch processing with ${fileCount} files`);\n  },\n  noFiles: (logger: Logger): void => {\n    logger.info('No batch files found for processing');\n  },\n  attempt: (current: number, max: number, logger: Logger): void => {\n    logger.info(`Processing attempt ${current} of ${max}`);\n  },\n  allSuccess: (logger: Logger): void => {\n    logger.info('✓ All files processed successfully');\n  },\n  maxRetries: (max: number, remaining: number, logger: Logger): void => {\n    logger.warn(\n      `⚠ Maximum retry attempts (${max}) reached. ${remaining} files remain unprocessed`,\n    );\n  },\n  scheduled: (count: number, logger: Logger): void => {\n    logger.info(`⟳ ${count} files scheduled for retry in next attempt`);\n  },\n  total: (count: number, logger: Logger): void => {\n    logger.info(`Total repositories processed: ${count}`);\n  },\n};\n\nexport const logInitialization = {\n  start: (logger: Logger): void => {\n    logger.info('Initializing repo-stats-queue application...');\n  },\n  auth: (logger: Logger): void => {\n    logger.debug('Creating auth config...');\n  },\n  octokit: (logger: Logger): void => {\n    logger.debug('Initializing octokit client...');\n  },\n  token: (logger: Logger): void => {\n    logger.debug('Generating app token...');\n  },\n  directories: (logger: Logger): void => {\n    logger.debug('Setting up output directories...');\n  },\n};\n","import { createAppAuth } from '@octokit/auth-app';\nimport type {\n  AppAuthOptions,\n  InstallationAuthOptions,\n} from '@octokit/auth-app';\nimport { Logger } from './types.js';\nimport { readFileSync } from 'fs';\n\nexport interface AuthConfig {\n  authStrategy?: typeof createAppAuth | undefined;\n  auth: string | AppAuthOptions | InstallationAuthOptions | undefined;\n}\n\nconst getAuthAppId = (appId?: string): number => {\n  const authAppId = appId || process.env.GITHUB_APP_ID;\n  if (!authAppId || isNaN(parseInt(authAppId))) {\n    throw new Error(\n      'You must specify a GitHub app ID using the --app-id argument or GITHUB_APP_ID environment variable.',\n    );\n  }\n  return parseInt(authAppId);\n};\n\nconst getAuthPrivateKey = (\n  privateKey?: string,\n  privateKeyFile?: string,\n): string => {\n  let authPrivateKey: string | undefined;\n\n  if (privateKeyFile || process.env.GITHUB_APP_PRIVATE_KEY_FILE) {\n    const filePath = privateKeyFile || process.env.GITHUB_APP_PRIVATE_KEY_FILE;\n    authPrivateKey = filePath ? readFileSync(filePath, 'utf-8') : undefined;\n  } else if (privateKey || process.env.GITHUB_APP_PRIVATE_KEY) {\n    authPrivateKey = privateKey || process.env.GITHUB_APP_PRIVATE_KEY;\n  }\n\n  if (!authPrivateKey) {\n    throw new Error(\n      'You must specify a GitHub app private key using the --private-key argument, --private-key-file argument, GITHUB_APP_PRIVATE_KEY_FILE environment variable, or GITHUB_APP_PRIVATE_KEY environment variable.',\n    );\n  }\n\n  return authPrivateKey;\n};\n\nconst getAuthInstallationId = (appInstallationId?: string): number => {\n  const authInstallationId =\n    appInstallationId || process.env.GITHUB_APP_INSTALLATION_ID;\n  if (!authInstallationId || isNaN(parseInt(authInstallationId))) {\n    throw new Error(\n      'You must specify a GitHub app installation ID using the --app-installation-id argument or GITHUB_APP_INSTALLATION_ID environment variable.',\n    );\n  }\n  return parseInt(authInstallationId);\n};\n\nconst getTokenAuthConfig = (accessToken?: string): AuthConfig => {\n  const authToken = accessToken || process.env.GITHUB_TOKEN;\n  if (!authToken) {\n    throw new Error(\n      'You must specify a GitHub access token using the --access-token argument or GITHUB_TOKEN environment variable.',\n    );\n  }\n  return { authStrategy: undefined, auth: authToken };\n};\n\nconst getInstallationAuthConfig = (\n  appId?: string,\n  privateKey?: string,\n  privateKeyFile?: string,\n  appInstallationId?: string,\n): AuthConfig => {\n  const auth: InstallationAuthOptions = {\n    type: 'installation',\n    appId: getAuthAppId(appId),\n    privateKey: getAuthPrivateKey(privateKey, privateKeyFile),\n    installationId: getAuthInstallationId(appInstallationId),\n  };\n  return { authStrategy: createAppAuth, auth };\n};\n\nexport const createAuthConfig = ({\n  accessToken,\n  appId,\n  privateKey,\n  privateKeyFile,\n  appInstallationId,\n  logger,\n}: {\n  accessToken?: string | undefined;\n  appId?: string | undefined;\n  privateKey?: string | undefined;\n  privateKeyFile?: string | undefined;\n  appInstallationId?: string | undefined;\n  logger: Logger;\n}): AuthConfig => {\n  try {\n    if (appInstallationId || process.env.GITHUB_APP_INSTALLATION_ID) {\n      logger.info(\n        'GitHub App installation ID detected. Authenticating using GitHub App installation...',\n      );\n      return getInstallationAuthConfig(\n        appId,\n        privateKey,\n        privateKeyFile,\n        appInstallationId,\n      );\n    } else {\n      logger.info(\n        'No GitHub App installation ID detected. Defaulting to authenticating using an access token...',\n      );\n      return getTokenAuthConfig(accessToken);\n    }\n  } catch (e) {\n    logger.error('Error creating and validating auth config', e);\n    throw e;\n  }\n};\n","import { readFileSync, writeFileSync, existsSync } from 'fs';\nimport { Logger, ProcessedPageState } from './types.js';\n\nconst LAST_STATE_FILE = 'last_known_state.json';\n\nfunction saveLastState(state: ProcessedPageState, logger: Logger): void {\n  try {\n    writeFileSync(LAST_STATE_FILE, JSON.stringify(state, null, 2));\n    logger.debug(`Saved last state to ${LAST_STATE_FILE}`);\n  } catch (error) {\n    logger.error(`Failed to save last state: ${error}`);\n  }\n}\n\nfunction loadLastState(logger: Logger): ProcessedPageState | null {\n  try {\n    if (existsSync(LAST_STATE_FILE)) {\n      const data = readFileSync(LAST_STATE_FILE, 'utf-8');\n      logger.info(`Loaded last state from ${LAST_STATE_FILE}`);\n      const parsedState = JSON.parse(data);\n\n      // Validate processedRepos exists and is an array\n      if (\n        !parsedState.processedRepos ||\n        !Array.isArray(parsedState.processedRepos)\n      ) {\n        logger.warn(\n          'Invalid state file: processedRepos is missing or not an array',\n        );\n        parsedState.processedRepos = [];\n      }\n\n      // Ensure uniqueness while keeping as array\n      parsedState.processedRepos = [...new Set(parsedState.processedRepos)];\n\n      return {\n        ...parsedState,\n        currentCursor: parsedState.currentCursor || null,\n        lastSuccessfulCursor: parsedState.lastSuccessfulCursor || null,\n        lastProcessedRepo: parsedState.lastProcessedRepo || null,\n        lastUpdated: parsedState.lastSuccessTimestamp || null,\n        completedSuccessfully: parsedState.completedSuccessfully || false,\n      };\n    }\n  } catch (error) {\n    logger.error(\n      `Failed to load last state: ${\n        error instanceof Error ? error.message : String(error)\n      }`,\n    );\n    logger.debug(\n      `State file contents: ${\n        existsSync(LAST_STATE_FILE)\n          ? readFileSync(LAST_STATE_FILE, 'utf-8')\n          : 'file not found'\n      }`,\n    );\n  }\n  return null;\n}\n\nexport function initializeState({\n  resumeFromLastSave,\n  logger,\n}: {\n  resumeFromLastSave?: boolean;\n  logger: Logger;\n}): { processedState: ProcessedPageState; resumeFromLastState: boolean } {\n  let processedState: ProcessedPageState = {\n    currentCursor: null,\n    processedRepos: [],\n    lastSuccessfulCursor: null,\n    lastProcessedRepo: null,\n    lastUpdated: null,\n    completedSuccessfully: false,\n    outputFileName: null,\n  };\n\n  let resumeFromLastState = false;\n  if (existsSync(LAST_STATE_FILE)) {\n    const lastState = loadLastState(logger);\n    let isNewRun = false;\n    if (lastState?.completedSuccessfully) {\n      logger.info(\n        'All repositories were previously processed successfully. Nothing to resume.',\n      );\n      isNewRun = true;\n    }\n\n    if (!isNewRun && resumeFromLastSave && lastState) {\n      processedState = lastState;\n      resumeFromLastState = true;\n      logger.info(\n        `Resuming from last state that was last updated: ${lastState.lastUpdated}`,\n      );\n    }\n  }\n\n  return { processedState, resumeFromLastState };\n}\n\nexport function updateState({\n  state,\n  repoName,\n  newCursor,\n  lastSuccessfulCursor,\n  logger,\n}: {\n  state: ProcessedPageState;\n  repoName?: string | null;\n  newCursor?: string | null;\n  lastSuccessfulCursor?: string | null;\n  logger: Logger;\n}): void {\n  // Update cursor if provided and different from current\n  if (newCursor && newCursor !== state.currentCursor) {\n    state.currentCursor = newCursor;\n    logger.debug(\n      `Updated cursor to: ${state.currentCursor} for repo: ${repoName}`,\n    );\n  }\n\n  // Update last successful cursor if provided\n  if (lastSuccessfulCursor) {\n    state.lastSuccessfulCursor = lastSuccessfulCursor;\n  }\n\n  // Add to processed repos if not already included\n  if (repoName && !state.processedRepos.includes(repoName)) {\n    state.processedRepos.push(repoName);\n  }\n\n  // Update last processed repo and timestamp\n  if (repoName) {\n    state.lastProcessedRepo = repoName;\n  }\n  state.lastUpdated = new Date().toISOString();\n\n  // Save state after updates\n  saveLastState(state, logger);\n}\n","export interface RetryConfig {\n  maxAttempts: number;\n  initialDelayMs: number;\n  maxDelayMs: number;\n  backoffFactor: number;\n  successThreshold?: number; // Number of successful runs needed to reset retry count\n}\n\nexport interface RetryState {\n  attempt: number;\n  successCount: number;\n  retryCount: number;\n  lastProcessedRepo?: string;\n  error?: Error;\n}\n\nexport async function withRetry<T>(\n  operation: () => Promise<T>,\n  config: RetryConfig,\n  onRetry?: (state: RetryState) => void,\n): Promise<T> {\n  let lastError: Error | undefined;\n  let currentDelay = config.initialDelayMs;\n  let successCount = 0;\n  let retryCount = 0;\n\n  for (let attempt = 1; attempt <= config.maxAttempts; attempt++) {\n    try {\n      const result = await operation();\n\n      successCount++;\n      if (successCount >= (config.successThreshold || 5)) {\n        successCount = 0;\n        retryCount = 0;\n      }\n\n      return result;\n    } catch (error) {\n      successCount = 0;\n      retryCount++;\n\n      lastError =\n        error instanceof Error\n          ? error\n          : new Error(\n              typeof error === 'object' ? JSON.stringify(error) : String(error),\n            );\n\n      if (attempt === config.maxAttempts) {\n        break;\n      }\n\n      if (onRetry) {\n        onRetry({\n          attempt,\n          error: lastError,\n          successCount,\n          retryCount,\n        });\n      }\n\n      await sleep(currentDelay);\n      currentDelay = Math.min(\n        currentDelay * config.backoffFactor,\n        config.maxDelayMs,\n      );\n    }\n  }\n\n  throw new Error(\n    `Operation failed after ${config.maxAttempts} attempts: ${\n      lastError?.message || 'No error message available'\n    }${lastError?.stack ? `\\nStack trace: ${lastError.stack}` : ''}`,\n  );\n}\n\nfunction sleep(ms: number): Promise<void> {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n","import { OctokitClient } from './service.js';\nimport { createOctokit } from './octokit.js';\nimport {\n  Arguments,\n  IssuesConnection,\n  IssueStatsResult,\n  Logger,\n  PullRequestsConnection,\n  PullRequestStatsResult,\n  RepositoryStats,\n  RepoStatsResult,\n  ProcessedPageState,\n  RepoProcessingResult,\n} from './types.js';\nimport { createLogger, logInitialization } from './logger.js';\nimport { createAuthConfig } from './auth.js';\nimport { initializeState, updateState } from './state.js';\nimport { appendFileSync, existsSync, writeFileSync } from 'fs';\nimport { withRetry, RetryConfig } from './retry.js';\nimport {\n  generateRepoStatsFileName,\n  convertKbToMb,\n  checkIfHasMigrationIssues,\n  formatElapsedTime,\n} from './utils.js';\nimport { readFileSync } from 'fs';\nimport { parse } from 'csv-parse/sync';\n\nconst _init = async (\n  opts: Arguments,\n): Promise<{\n  logger: Logger;\n  client: OctokitClient;\n  fileName: string;\n  processedState: ProcessedPageState;\n  retryConfig: RetryConfig;\n}> => {\n  const logFileName = `${opts.orgName}-repo-stats-${\n    new Date().toISOString().split('T')[0]\n  }.log`;\n  const logger = await createLogger(opts.verbose, logFileName);\n  logInitialization.start(logger);\n\n  logInitialization.auth(logger);\n  const authConfig = createAuthConfig({ ...opts, logger: logger });\n\n  logInitialization.octokit(logger);\n  const octokit = createOctokit(\n    authConfig,\n    opts.baseUrl,\n    opts.proxyUrl,\n    logger,\n  );\n\n  const client = new OctokitClient(octokit);\n\n  const { processedState, resumeFromLastState } = initializeState({\n    resumeFromLastSave: opts.resumeFromLastSave || false,\n    logger,\n  });\n\n  let fileName = '';\n  if (resumeFromLastState) {\n    fileName = processedState.outputFileName || '';\n    logger.info(`Resuming from last state. Using existing file: ${fileName}`);\n  } else {\n    fileName = generateRepoStatsFileName(opts.orgName);\n\n    initializeCsvFile(fileName, logger);\n    logger.info(`Results will be saved to file: ${fileName}`);\n\n    processedState.outputFileName = fileName;\n    updateState({ state: processedState, logger });\n  }\n\n  const retryConfig: RetryConfig = {\n    maxAttempts: opts.retryMaxAttempts || 3,\n    initialDelayMs: opts.retryInitialDelay || 1000,\n    maxDelayMs: opts.retryMaxDelay || 30000,\n    backoffFactor: opts.retryBackoffFactor || 2,\n    successThreshold: opts.retrySuccessThreshold || 5,\n  };\n\n  return {\n    logger,\n    client,\n    fileName,\n    processedState,\n    retryConfig,\n  };\n};\n\nexport async function run(opts: Arguments): Promise<void> {\n  const { logger, client, fileName, processedState, retryConfig } = await _init(\n    opts,\n  );\n  const startTime = new Date();\n  logger.info(`Started processing at: ${startTime.toISOString()}`);\n\n  // Create a state object to track counts that can be modified by reference\n  const processingState = {\n    successCount: 0,\n    retryCount: 0,\n  };\n\n  await withRetry(\n    async () => {\n      const result = await processRepositories({\n        client,\n        logger,\n        opts,\n        processedState,\n        state: processingState,\n        fileName,\n      });\n\n      const endTime = new Date();\n      const elapsedTime = formatElapsedTime(startTime, endTime);\n\n      if (result.isComplete) {\n        processedState.completedSuccessfully = true;\n        logger.info(\n          'All repositories have been processed successfully. Marking state as complete.',\n        );\n      }\n\n      logger.info(\n        `Completed processing ${result.processedCount} repositories. ` +\n          `Last cursor: ${result.cursor}, ` +\n          `Last repo: ${processedState.lastProcessedRepo}\\n` +\n          `Start time: ${startTime.toISOString()}\\n` +\n          `End time: ${endTime.toISOString()}\\n` +\n          `Total elapsed time: ${elapsedTime}\\n` +\n          `Consecutive successful operations: ${processingState.successCount}\\n` +\n          `Total retry attempts: ${processingState.retryCount}\\n` +\n          `Processing completed successfully: ${processedState.completedSuccessfully}`,\n      );\n\n      updateState({ state: processedState, logger });\n\n      // Check for and process missing repositories if enabled\n      if (opts.autoProcessMissing && result.isComplete) {\n        await processMissingRepositories({\n          opts,\n          fileName,\n          client,\n          logger,\n          processedState,\n          retryConfig,\n        });\n      }\n\n      return result;\n    },\n    retryConfig,\n    (state) => {\n      processingState.retryCount++;\n      processingState.successCount = 0;\n      logger.warn(\n        `Retry attempt ${state.attempt}: Failed while processing repositories. ` +\n          `Current cursor: ${processedState.currentCursor}, ` +\n          `Last successful cursor: ${processedState.lastSuccessfulCursor}, ` +\n          `Last processed repo: ${processedState.lastProcessedRepo}, ` +\n          `Processed repos count: ${processedState.processedRepos.length}, ` +\n          `Total retries: ${state.retryCount}, ` +\n          `Consecutive successes: ${state.successCount}, ` +\n          `Error: ${state.error?.message}\\n` +\n          `Elapsed time so far: ${formatElapsedTime(startTime, new Date())}`,\n      );\n      updateState({ state: processedState, logger });\n    },\n  );\n}\n\nasync function processMissingRepositories({\n  opts,\n  fileName,\n  client,\n  logger,\n  processedState,\n  retryConfig,\n}: {\n  opts: Arguments;\n  fileName: string;\n  client: OctokitClient;\n  logger: Logger;\n  processedState: ProcessedPageState;\n  retryConfig: RetryConfig;\n}): Promise<void> {\n  logger.info('Checking for missing repositories...');\n  const missingReposResult = await checkForMissingRepos({\n    opts,\n    processedFile: fileName,\n  });\n\n  const missingReposCount = missingReposResult.missingRepos.length;\n  if (missingReposCount === 0) {\n    logger.info(\n      'No missing repositories found. All repositories have been processed.',\n    );\n    return;\n  }\n\n  logger.info(\n    `Found ${missingReposCount} missing repositories that need to be processed`,\n  );\n\n  // Create temporary file with missing repos\n  const missingReposFile = `${\n    opts.orgName\n  }-missing-repos-${new Date().getTime()}.txt`;\n  writeFileSync(\n    missingReposFile,\n    missingReposResult.missingRepos\n      .map((repo) => `${opts.orgName}/${repo}`)\n      .join('\\n'),\n  );\n  logger.info(`Created temporary file with missing repos: ${missingReposFile}`);\n\n  try {\n    // Process the missing repos\n    logger.info('Processing missing repositories...');\n    const missingReposProcessingState = {\n      successCount: 0,\n      retryCount: 0,\n    };\n\n    await withRetry(\n      async () => {\n        const missingResult = await processRepositoriesFromFile({\n          client,\n          logger,\n          opts: { ...opts, repoList: missingReposFile },\n          processedState,\n          state: missingReposProcessingState,\n          fileName,\n        });\n\n        logger.info(\n          `Completed processing ${missingResult.processedCount} out of ${missingReposCount} missing repositories`,\n        );\n\n        return missingResult;\n      },\n      retryConfig,\n      (state) => {\n        missingReposProcessingState.retryCount++;\n        missingReposProcessingState.successCount = 0;\n        logger.warn(\n          `Retry attempt ${state.attempt}: Failed while processing missing repositories. ` +\n            `Error: ${state.error?.message}`,\n        );\n      },\n    );\n\n    logger.info('Completed processing of missing repositories');\n  } finally {\n    // Clean up temporary file\n    if (existsSync(missingReposFile)) {\n      const fs = require('fs');\n      fs.unlinkSync(missingReposFile);\n      logger.info(`Removed temporary file: ${missingReposFile}`);\n    }\n  }\n}\n\nfunction initializeCsvFile(fileName: string, logger: Logger): void {\n  const columns = [\n    'Org_Name',\n    'Repo_Name',\n    'Is_Empty',\n    'Last_Push',\n    'Last_Update',\n    'isFork',\n    'isArchived',\n    'Repo_Size_mb',\n    'Record_Count',\n    'Collaborator_Count',\n    'Protected_Branch_Count',\n    'PR_Review_Count',\n    'Milestone_Count',\n    'Issue_Count',\n    'PR_Count',\n    'PR_Review_Comment_Count',\n    'Commit_Comment_Count',\n    'Issue_Comment_Count',\n    'Issue_Event_Count',\n    'Release_Count',\n    'Project_Count',\n    'Branch_Count',\n    'Tag_Count',\n    'Discussion_Count',\n    'Has_Wiki',\n    'Full_URL',\n    'Migration_Issue',\n    'Created',\n  ];\n\n  if (!existsSync(fileName)) {\n    logger.info(`Creating new CSV file: ${fileName}`);\n    // Create header row using same approach as data rows\n    const headerRow = `${columns.join(',')}\\n`;\n    writeFileSync(fileName, headerRow);\n  } else {\n    logger.info(`Using existing CSV file: ${fileName}`);\n  }\n}\n\nasync function analyzeRepositoryStats({\n  repo,\n  owner,\n  extraPageSize,\n  client,\n  logger,\n}: {\n  repo: RepositoryStats;\n  owner: string;\n  extraPageSize: number;\n  client: OctokitClient;\n  logger: Logger;\n}): Promise<RepoStatsResult> {\n  // Run issue and PR analysis concurrently\n  const [issueStats, prStats] = await Promise.all([\n    analyzeIssues({\n      owner,\n      repo: repo.name,\n      per_page: extraPageSize,\n      issues: repo.issues,\n      client,\n      logger,\n    }),\n    analyzePullRequests({\n      owner,\n      repo: repo.name,\n      per_page: extraPageSize,\n      pullRequests: repo.pullRequests,\n      client,\n      logger,\n    }),\n  ]);\n\n  return mapToRepoStatsResult(repo, issueStats, prStats);\n}\n\nasync function* processRepoStats({\n  reposIterator,\n  client,\n  logger,\n  extraPageSize,\n  processedState,\n}: {\n  reposIterator: AsyncGenerator<RepositoryStats, void, unknown>;\n  client: OctokitClient;\n  logger: Logger;\n  extraPageSize: number;\n  processedState: ProcessedPageState;\n}): AsyncGenerator<RepoStatsResult> {\n  for await (const repo of reposIterator) {\n    if (repo.pageInfo?.endCursor) {\n      updateState({\n        state: processedState,\n        newCursor: repo.pageInfo.endCursor,\n        logger,\n      });\n    }\n\n    const result = await analyzeRepositoryStats({\n      repo,\n      owner: repo.owner.login,\n      extraPageSize,\n      client,\n      logger,\n    });\n\n    yield result;\n  }\n}\n\nasync function handleRepoProcessingSuccess({\n  result,\n  processedState,\n  state,\n  opts,\n  client,\n  logger,\n  processedCount,\n  currentCursor = null,\n}: {\n  result: RepoStatsResult;\n  processedState: ProcessedPageState;\n  state: { successCount: number; retryCount: number };\n  opts: Arguments;\n  client: OctokitClient;\n  logger: Logger;\n  processedCount: number;\n  currentCursor?: string | null;\n}): Promise<void> {\n  const successThreshold = opts.retrySuccessThreshold || 5;\n\n  // Track successful processing\n  state.successCount++;\n  if (state.successCount >= successThreshold && state.retryCount > 0) {\n    logger.info(\n      `Reset retry count after ${state.successCount} successful operations`,\n    );\n    state.retryCount = 0;\n    state.successCount = 0;\n  }\n\n  updateState({\n    state: processedState,\n    repoName: result.Repo_Name,\n    lastSuccessfulCursor: currentCursor,\n    logger,\n  });\n\n  // Check rate limits after configured interval\n  if (processedCount % (opts.rateLimitCheckInterval || 10) === 0) {\n    const rateLimitReached = await checkAndHandleRateLimits({\n      client,\n      logger,\n      processedCount,\n    });\n\n    if (rateLimitReached) {\n      throw new Error(\n        'Rate limit reached. Processing will be paused until limits reset.',\n      );\n    }\n  }\n}\n\nasync function processRepositoriesFromFile({\n  client,\n  logger,\n  opts,\n  processedState,\n  state,\n  fileName,\n}: {\n  client: OctokitClient;\n  logger: Logger;\n  opts: Arguments;\n  processedState: ProcessedPageState;\n  state: { successCount: number; retryCount: number };\n  fileName: string;\n}): Promise<RepoProcessingResult> {\n  logger.info(`Processing repositories from list: ${opts.repoList}`);\n  const repoList = readFileSync(opts.repoList!, 'utf-8')\n    .split('\\n')\n    .filter((line) => line.trim() !== '')\n    .map((line) => {\n      const [owner, repo] = line.trim().split('/');\n      return { owner, repo };\n    });\n\n  let processedCount = 0;\n\n  for (const { owner, repo } of repoList) {\n    try {\n      if (processedState.processedRepos.includes(repo)) {\n        logger.debug(`Skipping already processed repository: ${repo}`);\n        continue;\n      }\n\n      const repoStats = await client.getRepoStats(\n        owner,\n        repo,\n        opts.pageSize || 10,\n      );\n\n      const result = await analyzeRepositoryStats({\n        repo: repoStats,\n        owner,\n        extraPageSize: opts.extraPageSize || 50,\n        client,\n        logger,\n      });\n\n      await writeResultToCsv(result, fileName, logger);\n\n      await handleRepoProcessingSuccess({\n        result,\n        processedState,\n        state,\n        opts,\n        client,\n        logger,\n        processedCount: ++processedCount,\n      });\n    } catch (error) {\n      state.successCount = 0;\n      logger.error(`Failed processing repo ${repo}: ${error}`);\n      throw error;\n    }\n  }\n\n  return {\n    cursor: null,\n    processedRepos: processedState.processedRepos,\n    processedCount,\n    isComplete: true,\n    successCount: state.successCount,\n    retryCount: state.retryCount,\n  };\n}\n\nasync function processRepositories({\n  client,\n  logger,\n  opts,\n  processedState,\n  state,\n  fileName,\n}: {\n  client: OctokitClient;\n  logger: Logger;\n  opts: Arguments;\n  processedState: ProcessedPageState;\n  state: { successCount: number; retryCount: number };\n  fileName: string;\n}): Promise<RepoProcessingResult> {\n  logger.debug(\n    `Starting/Resuming from cursor: ${processedState.currentCursor}`,\n  );\n\n  if (opts.repoList) {\n    return processRepositoriesFromFile({\n      client,\n      logger,\n      opts,\n      processedState,\n      state,\n      fileName,\n    });\n  }\n\n  // Use lastSuccessfulCursor only if cursor is null (first try)\n  const startCursor =\n    processedState.currentCursor || processedState.lastSuccessfulCursor;\n  logger.info(`Using start cursor: ${startCursor}`);\n\n  const reposIterator = client.getOrgRepoStats(\n    opts.orgName,\n    opts.pageSize || 10,\n    startCursor,\n  );\n\n  let processedCount = 0;\n  let iterationComplete = false;\n\n  try {\n    for await (const result of processRepoStats({\n      reposIterator,\n      client,\n      logger,\n      extraPageSize: opts.extraPageSize || 50,\n      processedState,\n    })) {\n      try {\n        if (processedState.processedRepos.includes(result.Repo_Name)) {\n          logger.debug(\n            `Skipping already processed repository: ${result.Repo_Name}`,\n          );\n          continue;\n        }\n\n        await writeResultToCsv(result, fileName, logger);\n\n        await handleRepoProcessingSuccess({\n          result,\n          processedState,\n          state,\n          opts,\n          client,\n          logger,\n          processedCount: ++processedCount,\n          currentCursor: processedState.currentCursor,\n        });\n      } catch (error) {\n        state.successCount = 0;\n        logger.error(`Failed processing repo ${result.Repo_Name}: ${error}`);\n        processedState.currentCursor = processedState.lastSuccessfulCursor;\n        throw error;\n      }\n    }\n\n    // If we get here, we've completed the iteration without errors\n    iterationComplete = true;\n    logger.info('Successfully completed processing all repositories');\n  } catch (error) {\n    // If there's an error during iteration, we'll handle it at the caller\n    logger.error(`Error during repository processing: ${error}`);\n    throw error;\n  }\n\n  // Simple completion logic: if we've successfully iterated through all repositories, we're done\n  const isComplete = iterationComplete;\n\n  if (isComplete) {\n    logger.info(\n      'No more repositories to process - processing completed successfully',\n    );\n  }\n\n  return {\n    cursor: processedState.lastSuccessfulCursor,\n    processedRepos: processedState.processedRepos,\n    processedCount,\n    isComplete,\n    successCount: state.successCount,\n    retryCount: state.retryCount,\n  };\n}\n\nasync function checkAndHandleRateLimits({\n  client,\n  logger,\n  processedCount,\n}: {\n  client: OctokitClient;\n  logger: Logger;\n  processedCount: number;\n}): Promise<boolean> {\n  logger.debug(\n    `Checking rate limits after processing ${processedCount} repositories`,\n  );\n  const rateLimits = await client.checkRateLimits();\n\n  if (\n    rateLimits.graphQLRemaining === 0 ||\n    rateLimits.apiRemainingRequest === 0\n  ) {\n    const limitType =\n      rateLimits.graphQLRemaining === 0 ? 'GraphQL' : 'REST API';\n    logger.warn(\n      `${limitType} rate limit reached after processing ${processedCount} repositories`,\n    );\n\n    if (rateLimits.messageType === 'error') {\n      logger.error(rateLimits.message);\n      throw new Error(\n        `${limitType} rate limit exceeded and maximum retries reached`,\n      );\n    }\n\n    logger.warn(rateLimits.message);\n    logger.info(`GraphQL remaining: ${rateLimits.graphQLRemaining}`);\n    logger.info(`REST API remaining: ${rateLimits.apiRemainingRequest}`);\n\n    return true; // indicates rate limit was reached\n  } else {\n    logger.info(\n      `GraphQL remaining: ${rateLimits.graphQLRemaining}, REST API remaining: ${rateLimits.apiRemainingRequest}`,\n    );\n  }\n\n  return false; // indicates rate limit was not reached\n}\n\nasync function writeResultToCsv(\n  result: RepoStatsResult,\n  fileName: string,\n  logger: Logger,\n): Promise<void> {\n  try {\n    const formattedResult = {\n      ...result,\n      Is_Empty: result.Is_Empty?.toString().toUpperCase() || 'FALSE',\n      isFork: result.isFork?.toString().toUpperCase() || 'FALSE',\n      isArchived: result.isArchived?.toString().toUpperCase() || 'FALSE',\n      Has_Wiki: result.Has_Wiki?.toString().toUpperCase() || 'FALSE',\n      Migration_Issue:\n        result.Migration_Issue?.toString().toUpperCase() || 'FALSE',\n    };\n\n    // Create CSV row manually to maintain strict order\n    const values = [\n      formattedResult.Org_Name,\n      formattedResult.Repo_Name,\n      formattedResult.Is_Empty,\n      formattedResult.Last_Push,\n      formattedResult.Last_Update,\n      formattedResult.isFork,\n      formattedResult.isArchived,\n      formattedResult.Repo_Size_mb,\n      formattedResult.Record_Count,\n      formattedResult.Collaborator_Count,\n      formattedResult.Protected_Branch_Count,\n      formattedResult.PR_Review_Count,\n      formattedResult.Milestone_Count,\n      formattedResult.Issue_Count,\n      formattedResult.PR_Count,\n      formattedResult.PR_Review_Comment_Count,\n      formattedResult.Commit_Comment_Count,\n      formattedResult.Issue_Comment_Count,\n      formattedResult.Issue_Event_Count,\n      formattedResult.Release_Count,\n      formattedResult.Project_Count,\n      formattedResult.Branch_Count,\n      formattedResult.Tag_Count,\n      formattedResult.Discussion_Count,\n      formattedResult.Has_Wiki,\n      formattedResult.Full_URL,\n      formattedResult.Migration_Issue,\n      formattedResult.Created,\n    ].map((value) =>\n      // Escape values containing commas with quotes\n      value?.toString().includes(',') ? `\"${value}\"` : value ?? '',\n    );\n\n    const csvRow = `${values.join(',')}\\n`;\n    appendFileSync(fileName, csvRow);\n\n    logger.info(\n      `Successfully wrote result for repository: ${result.Repo_Name}`,\n    );\n  } catch (error) {\n    logger.error(\n      `Failed to write CSV for repository ${result.Repo_Name}: ${\n        error instanceof Error ? error.message : String(error)\n      }`,\n    );\n    throw error;\n  }\n}\n\nfunction mapToRepoStatsResult(\n  repo: RepositoryStats,\n  issueStats: IssueStatsResult,\n  prStats: PullRequestStatsResult,\n): RepoStatsResult {\n  const repoSizeMb = convertKbToMb(repo.diskUsage);\n  const totalRecordCount = calculateRecordCount(repo, issueStats, prStats);\n  const hasMigrationIssues = checkIfHasMigrationIssues({\n    repoSizeMb,\n    totalRecordCount,\n  });\n\n  return {\n    Org_Name: repo.owner.login.toLowerCase(),\n    Repo_Name: repo.name.toLowerCase(),\n    Is_Empty: repo.isEmpty,\n    Last_Push: repo.pushedAt,\n    Last_Update: repo.updatedAt,\n    isFork: repo.isFork,\n    isArchived: repo.isArchived,\n    Repo_Size_mb: repoSizeMb,\n    Record_Count: totalRecordCount,\n    Collaborator_Count: repo.collaborators.totalCount,\n    Protected_Branch_Count: repo.branchProtectionRules.totalCount,\n    PR_Review_Count: prStats.prReviewCount,\n    PR_Review_Comment_Count: prStats.prReviewCommentCount,\n    Commit_Comment_Count: repo.commitComments.totalCount,\n    Milestone_Count: repo.milestones.totalCount,\n    PR_Count: repo.pullRequests.totalCount,\n    Project_Count: repo.projectsV2.totalCount,\n    Branch_Count: repo.branches.totalCount,\n    Release_Count: repo.releases.totalCount,\n    Issue_Count: issueStats.totalIssuesCount,\n    Issue_Event_Count: issueStats.issueEventCount + prStats.issueEventCount,\n    Issue_Comment_Count:\n      issueStats.issueCommentCount + prStats.issueCommentCount,\n    Tag_Count: repo.tags.totalCount,\n    Discussion_Count: repo.discussions.totalCount,\n    Has_Wiki: repo.hasWikiEnabled,\n    Full_URL: repo.url,\n    Migration_Issue: hasMigrationIssues,\n    Created: repo.createdAt,\n  };\n}\n\nfunction calculateRecordCount(\n  repo: RepositoryStats,\n  issueStats: IssueStatsResult,\n  prStats: PullRequestStatsResult,\n): number {\n  // Match exactly how the bash script calculates record count (line 918)\n  return (\n    repo.collaborators.totalCount +\n    repo.branchProtectionRules.totalCount +\n    prStats.prReviewCount +\n    repo.milestones.totalCount +\n    issueStats.totalIssuesCount +\n    repo.pullRequests.totalCount +\n    prStats.prReviewCommentCount +\n    repo.commitComments.totalCount +\n    issueStats.issueCommentCount +\n    prStats.issueCommentCount +\n    issueStats.issueEventCount +\n    prStats.issueEventCount +\n    repo.releases.totalCount +\n    repo.projectsV2.totalCount\n  );\n}\n\nasync function analyzeIssues({\n  owner,\n  repo,\n  per_page,\n  issues,\n  client,\n  logger,\n}: {\n  owner: string;\n  repo: string;\n  per_page: number;\n  issues: IssuesConnection;\n  client: OctokitClient;\n  logger: Logger;\n}): Promise<IssueStatsResult> {\n  logger.debug(`Analyzing issues for repository: ${repo}`);\n\n  if (issues.totalCount <= 0) {\n    logger.debug(`No issues found for repository: ${repo}`);\n    return {\n      totalIssuesCount: issues.totalCount,\n      issueEventCount: 0,\n      issueCommentCount: 0,\n    };\n  }\n\n  let totalEventCount = 0;\n  let totalCommentCount = 0;\n\n  // Process first page\n  for (const issue of issues.nodes) {\n    const eventCount = issue.timeline.totalCount;\n    const commentCount = issue.comments.totalCount;\n\n    // Calculate non-comment events by subtracting comments from total timeline events\n    totalEventCount += eventCount - commentCount;\n    totalCommentCount += commentCount;\n  }\n\n  // Process additional pages if they exist\n  if (issues.pageInfo.hasNextPage && issues.pageInfo.endCursor != null) {\n    logger.debug(`More pages of issues found for repository: ${repo}`);\n\n    try {\n      // Get next page of issues using iterator\n      const nextPagesIterator = client.getRepoIssues(\n        owner,\n        repo,\n        per_page,\n        issues.pageInfo.endCursor,\n      );\n\n      // Process each issue from subsequent pages\n      for await (const issue of nextPagesIterator) {\n        const eventCount = issue.timeline.totalCount;\n        const commentCount = issue.comments.totalCount;\n\n        // Calculate non-comment events by subtracting comments from total timeline events\n        totalEventCount += eventCount - commentCount;\n        totalCommentCount += commentCount;\n      }\n    } catch (error) {\n      logger.error(\n        `Error retrieving additional issues for ${owner}/${repo}. ` +\n          `Consider reducing page size. Error: ${error}`,\n        error,\n      );\n      throw error;\n    }\n  }\n\n  logger.debug(`Gathered all issues from repository: ${repo}`);\n  return {\n    totalIssuesCount: issues.totalCount,\n    issueEventCount: totalEventCount,\n    issueCommentCount: totalCommentCount,\n  };\n}\n\nasync function analyzePullRequests({\n  owner,\n  repo,\n  per_page,\n  pullRequests,\n  client,\n  logger,\n}: {\n  owner: string;\n  repo: string;\n  per_page: number;\n  pullRequests: PullRequestsConnection;\n  client: OctokitClient;\n  logger: Logger;\n}): Promise<PullRequestStatsResult> {\n  if (pullRequests.totalCount <= 0) {\n    return {\n      prReviewCommentCount: 0,\n      commitCommentCount: 0,\n      issueEventCount: 0,\n      issueCommentCount: 0,\n      prReviewCount: 0,\n    };\n  }\n\n  let issueEventCount = 0;\n  let issueCommentCount = 0;\n  let prReviewCount = 0;\n  let prReviewCommentCount = 0;\n  let commitCommentCount = 0;\n\n  // Process first page\n  for (const pr of pullRequests.nodes) {\n    const eventCount = pr.timeline.totalCount;\n    const commentCount = pr.comments.totalCount;\n    const reviewCount = pr.reviews.totalCount;\n    const commitCount = pr.commits.totalCount;\n\n    // This matches how the bash script handles event counts\n    // It subtracts comments from timeline events, and handles commit limits\n    const redundantEventCount =\n      commentCount + (commitCount > 250 ? 250 : commitCount);\n\n    const adjustedEventCount = Math.max(0, eventCount - redundantEventCount);\n\n    issueEventCount += adjustedEventCount;\n    issueCommentCount += commentCount;\n    prReviewCount += reviewCount;\n\n    // Count review comments by examining each review\n    for (const review of pr.reviews.nodes) {\n      prReviewCommentCount += review.comments.totalCount;\n    }\n\n    commitCommentCount += commitCount;\n  }\n\n  // Process additional pages if they exist\n  if (\n    pullRequests.pageInfo.hasNextPage &&\n    pullRequests.pageInfo.endCursor != null\n  ) {\n    const cursor = pullRequests.pageInfo.endCursor;\n    logger.debug(\n      `Fetching additional pull requests for ${repo} starting from cursor ${cursor}`,\n    );\n\n    for await (const pr of client.getRepoPullRequests(\n      owner,\n      repo,\n      per_page,\n      cursor,\n    )) {\n      const eventCount = pr.timeline.totalCount;\n      const commentCount = pr.comments.totalCount;\n      const reviewCount = pr.reviews.totalCount;\n      const commitCount = pr.commits.totalCount;\n\n      const redundantEventCount =\n        commentCount + (commitCount > 250 ? 250 : commitCount);\n\n      const adjustedEventCount = Math.max(0, eventCount - redundantEventCount);\n\n      issueEventCount += adjustedEventCount;\n      issueCommentCount += commentCount;\n      prReviewCount += reviewCount;\n\n      // Process review comments for additional pages\n      for (const review of pr.reviews.nodes) {\n        prReviewCommentCount += review.comments.totalCount;\n      }\n\n      commitCommentCount += commitCount;\n    }\n  }\n\n  return {\n    prReviewCommentCount,\n    commitCommentCount,\n    issueEventCount,\n    issueCommentCount,\n    prReviewCount,\n  };\n}\n\nexport async function checkForMissingRepos({\n  opts,\n  processedFile,\n}: {\n  opts: Arguments;\n  processedFile: string;\n}): Promise<{\n  missingRepos: string[];\n}> {\n  const { logger, client } = await _init(opts);\n  const org = opts.orgName.toLowerCase();\n  const per_page = opts.pageSize || 10;\n\n  logger.debug(`Checking for missing repositories in organization: ${org}`);\n\n  logger.info(\n    `Reading processed file: ${processedFile} to check for missing repositories`,\n  );\n  const fileContent = readFileSync(processedFile, 'utf-8');\n  const records = parse(fileContent, {\n    columns: true,\n    skip_empty_lines: true,\n  });\n\n  logger.debug(`Parsed ${records.length} records from processed file`);\n  const processedReposSet = new Set<string>();\n  records.forEach((record: { Repo_Name: string }) => {\n    processedReposSet.add(record.Repo_Name.toLowerCase());\n  });\n\n  // file name of output file with missing repos with datetime suffix\n  const missingReposFileName = `${org}-missing-repos-${\n    new Date().toISOString().split('T')[0]\n  }-${new Date().toISOString().split('T')[1].split(':')[0]}-${\n    new Date().toISOString().split('T')[1].split(':')[1]\n  }.csv`;\n\n  logger.info('Checking for missing repositories in the organization');\n  const missingRepos = [];\n  for await (const repo of client.listReposForOrg(org, per_page)) {\n    if (processedReposSet.has(repo.name.toLowerCase())) {\n      continue;\n    } else {\n      missingRepos.push(repo.name);\n      // write to csv file append\n      const csvRow = `${repo.name}\\n`;\n      appendFileSync(missingReposFileName, csvRow);\n    }\n  }\n  logger.info(`Found ${missingRepos.length} missing repositories`);\n\n  return { missingRepos };\n}\n","import * as commander from 'commander';\nimport { parseFloatOption, parseIntOption } from '../utils.js';\nimport { Arguments } from '../types.js';\nimport VERSION from '../version.js';\n\nimport { run } from '../main.js';\n\nconst repoStatsCommand = new commander.Command();\nconst { Option } = commander;\n\nrepoStatsCommand\n  .name('repo-stats')\n  .description('Gathers repo-stats for all repositories in an organization')\n  .version(VERSION)\n  .addOption(\n    new Option(\n      '-o, --org-name <org>',\n      'The name of the organization to process',\n    ).env('ORG_NAME'),\n  )\n  .addOption(\n    new Option('-t, --access-token <token>', 'GitHub access token').env(\n      'ACCESS_TOKEN',\n    ),\n  )\n  .addOption(\n    new Option('-u, --base-url <url>', 'GitHub API base URL')\n      .env('BASE_URL')\n      .default('https://api.github.com'),\n  )\n  .addOption(\n    new Option('--proxy-url <url>', 'Proxy URL if required').env('PROXY_URL'),\n  )\n  .addOption(\n    new Option('-v, --verbose', 'Enable verbose logging').env('VERBOSE'),\n  )\n  .addOption(new Option('--app-id <id>', 'GitHub App ID').env('APP_ID'))\n  .addOption(\n    new Option('--private-key <key>', 'GitHub App private key').env(\n      'PRIVATE_KEY',\n    ),\n  )\n  .addOption(\n    new Option(\n      '--private-key-file <file>',\n      'Path to GitHub App private key file',\n    ).env('PRIVATE_KEY_FILE'),\n  )\n  .addOption(\n    new Option('--app-installation-id <id>', 'GitHub App installation ID').env(\n      'APP_INSTALLATION_ID',\n    ),\n  )\n  .addOption(\n    new Option('--page-size <size>', 'Number of items per page')\n      .env('PAGE_SIZE')\n      .default('10')\n      .argParser(parseIntOption),\n  )\n  .addOption(\n    new Option('--extra-page-size <size>', 'Extra page size')\n      .env('EXTRA_PAGE_SIZE')\n      .default('50')\n      .argParser(parseIntOption),\n  )\n  .addOption(\n    new Option(\n      '--rate-limit-check-interval <seconds>',\n      'Interval for rate limit checks in seconds',\n    )\n      .env('RATE_LIMIT_CHECK_INTERVAL')\n      .default('60')\n      .argParser(parseIntOption),\n  )\n  .addOption(\n    new Option(\n      '--retry-max-attempts <attempts>',\n      'Maximum number of retry attempts',\n    )\n      .env('RETRY_MAX_ATTEMPTS')\n      .default('3')\n      .argParser(parseIntOption),\n  )\n  .addOption(\n    new Option(\n      '--retry-initial-delay <milliseconds>',\n      'Initial delay for retry in milliseconds',\n    )\n      .env('RETRY_INITIAL_DELAY')\n      .default('1000')\n      .argParser(parseIntOption),\n  )\n  .addOption(\n    new Option(\n      '--retry-max-delay <milliseconds>',\n      'Maximum delay for retry in milliseconds',\n    )\n      .env('RETRY_MAX_DELAY')\n      .default('30000')\n      .argParser(parseIntOption),\n  )\n  .addOption(\n    new Option(\n      '--retry-backoff-factor <factor>',\n      'Backoff factor for retry delays',\n    )\n      .env('RETRY_BACKOFF_FACTOR')\n      .default('2')\n      .argParser(parseFloatOption),\n  )\n  .addOption(\n    new Option(\n      '--retry-success-threshold <count>',\n      'Number of successful operations before resetting retry count',\n    )\n      .env('RETRY_SUCCESS_THRESHOLD')\n      .default('5')\n      .argParser(parseIntOption),\n  )\n  .addOption(\n    new Option(\n      '--resume-from-last-save',\n      'Resume from the last saved state',\n    ).env('RESUME_FROM_LAST_SAVE'),\n  )\n  .addOption(\n    new Option(\n      '--repo-list <file>',\n      'Path to file containing list of repositories to process (format: owner/repo_name)',\n    ).env('REPO_LIST'),\n  )\n  .addOption(\n    new Option(\n      '--auto-process-missing',\n      'Automatically process any missing repositories when main processing is complete',\n    ).env('AUTO_PROCESS_MISSING'),\n  )\n  .action(async (options: Arguments) => {\n    console.log('Version:', VERSION);\n\n    console.log('Starting repo-stats...');\n    await run(options);\n    console.log('Repo-stats completed.');\n  });\n\nexport default repoStatsCommand;\n","import * as commander from 'commander';\nimport VERSION from '../version.js';\nimport { parseIntOption } from '../utils.js';\nimport { Arguments } from '../types.js';\nimport { checkForMissingRepos } from '../main.js';\n\nconst missingReposCommand = new commander.Command();\nconst { Option } = commander;\n\nmissingReposCommand\n  .name('missing-repos')\n  .description(\n    'Identifies repositories that are part of an organization but not found in a specified file. Can be run after a call to repo-stats-command.',\n  )\n  .version(VERSION)\n  .addOption(\n    new Option(\n      '-f, --output-file-name <file>',\n      'Repo Stats File to check repos against',\n    )\n      .env('OUTPUT_FILE_NAME')\n      .makeOptionMandatory(true),\n  )\n  .addOption(\n    new Option(\n      '-o, --org-name <org>',\n      'The name of the organization to process',\n    ).env('ORG_NAME'),\n  )\n  .addOption(\n    new Option('-t, --access-token <token>', 'GitHub access token').env(\n      'ACCESS_TOKEN',\n    ),\n  )\n  .addOption(\n    new Option('-u, --base-url <url>', 'GitHub API base URL')\n      .env('BASE_URL')\n      .default('https://api.github.com'),\n  )\n  .addOption(\n    new Option('--proxy-url <url>', 'Proxy URL if required').env('PROXY_URL'),\n  )\n  .addOption(\n    new Option('-v, --verbose', 'Enable verbose logging').env('VERBOSE'),\n  )\n  .addOption(new Option('--app-id <id>', 'GitHub App ID').env('APP_ID'))\n  .addOption(\n    new Option('--private-key <key>', 'GitHub App private key').env(\n      'PRIVATE_KEY',\n    ),\n  )\n  .addOption(\n    new Option(\n      '--private-key-file <file>',\n      'Path to GitHub App private key file',\n    ).env('PRIVATE_KEY_FILE'),\n  )\n  .addOption(\n    new Option('--app-installation-id <id>', 'GitHub App installation ID').env(\n      'APP_INSTALLATION_ID',\n    ),\n  )\n  .addOption(\n    new Option('--page-size <size>', 'Number of items per page')\n      .env('PAGE_SIZE')\n      .default('10')\n      .argParser(parseIntOption),\n  )\n  .action(async (options: Arguments) => {\n    console.log('Version:', VERSION);\n\n    const result = await checkForMissingRepos({\n      opts: options,\n      processedFile: `${options.outputFileName}`,\n    });\n\n    const missing = result.missingRepos;\n    if (missing.length > 0) {\n      console.log('Missing Repositories:');\n      missing.forEach((repo) => {\n        console.log(`- ${repo}`);\n      });\n    } else {\n      console.log('No missing repositories found.');\n    }\n  });\n\nexport default missingReposCommand;\n","import { config } from 'dotenv';\nconfig();\n\nimport * as commander from 'commander';\n\nimport VERSION from './version.js';\nimport repoStatsCommand from './commands/repo-stats-command.js';\nimport missingReposCommand from './commands/missing-repos-command.js';\n\nconst program = new commander.Command();\n\nprogram\n  .description(\n    'Fetches and processes repository statistics from GitHub organizations',\n  )\n  .version(VERSION)\n  .addCommand(repoStatsCommand)\n  .addCommand(missingReposCommand);\n\nprogram.parse(process.argv);\n"],"names":["fetch","undiciFetch","Option"],"mappings":"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"}